CREATE TABLE STUDENTS
(
    STU_ID VARCHAR2(30) PRIMARY KEY,
    STU_FN VARCHAR2(30),
    STU_LN VARCHAR2(30)
);
INSERT ALL
INTO STUDENTS VALUES ('1','NAVEEN','R')
INTO STUDENTS VALUES ('2','ARUN','P')
INTO STUDENTS VALUES ('3','HARI','L')
INTO STUDENTS VALUES ('4','KUMAR','V')
INTO STUDENTS VALUES ('5','MANI','S')
SELECT * FROM DUAL;
SELECT * FROM STUDENTS;
DROP TABLE COURSES;
CREATE TABLE COURSES
(
    COU_ID VARCHAR2(30) PRIMARY KEY,
    COU_NAM VARCHAR2(30)
    
);
INSERT ALL
INTO COURSES VALUES ('101','CSE')
INTO COURSES VALUES ('102','EEE')
SELECT * FROM DUAL;
SELECT * FROM COURSES;
DROP TABLE GRADES;
CREATE TABLE GRADES
(
    GRADE VARCHAR2(30) PRIMARY KEY,
    GRADE_POINTS NUMBER(5,2)
    
);
INSERT ALL
INTO GRADES VALUES ('A+','9')
INTO GRADES VALUES ('O','10')
INTO GRADES VALUES ('A','8')
INTO GRADES VALUES ('U','0')
SELECT * FROM DUAL;
SELECT * FROM GRADES;
DROP TABLE STUDENT_COURSE;
CREATE TABLE STUDENT_COURSE
(
     STU_ID VARCHAR2(30) PRIMARY KEY,
     COU_ID VARCHAR2(30),
     GRADE VARCHAR2(30),
      FOREIGN KEY(STU_ID) REFERENCES STUDENTS(STU_ID),
      FOREIGN KEY(COU_ID) REFERENCES COURSES(COU_ID),
      FOREIGN KEY(GRADE) REFERENCES GRADES(GRADE)
    
);
INSERT ALL
INTO STUDENT_COURSE VALUES ('1','101','A')
INTO STUDENT_COURSE VALUES ('2','101','A')
INTO STUDENT_COURSE VALUES ('3','102','A+')
INTO STUDENT_COURSE VALUES ('4','102','O')
INTO STUDENT_COURSE VALUES ('5','102','A+')
SELECT * FROM DUAL;

//////////////////////////////////////////////////////////SUB QUERT AND CORRELATEDSUBQUERY/////////////////////

CREATE TABLE PRODUCT1
(
    PRODUCT_ID NUMBER,
    PRODUCT_NAME VARCHAR2(50),
    PRICE NUMBER
)
CREATE TABLE ITEM_LIST
(
    ITEM_ID NUMBER,
    NAME VARCHAR2(50),
    COST NUMBER
)
INSERT ALL
INTO PRODUCT1 VALUES(1,'A',1000)
INTO PRODUCT1 VALUES(2,'B',1500)
INTO PRODUCT1 VALUES(3,'C',1200)
INTO ITEM_LIST VALUES(4,'D',2000)
INTO ITEM_LIST VALUES(5,'E',2200)
SELECT * FROM DUAL;

SELECT * FROM ITEM_LIST;
SELECT * FROM HR.EPLOYEES WHERE DEPARTMENT_ID=
(SELECT DEPARTMENT_ID FROM HR.DEPARTMENTS WHERE DEPARTMENT_NAME='Finance')

SELECT * FROM HR.EPLOYEES WHERE DEPARTMENT_ID IN
(SELECT DEPARTMENT_ID FROM HR.DEPARTMENTS WHERE DEPARTMENT_NAME IN('Finance','Sales'))
SELECT * FROM PRODUCT1 WHERE (PRODUCT_ID,PRODUCT_NAME)=
(SELECT ITEM_ID,NAME FROM ITEM_LIST WHERE COST<2000)
SELECT * FROM PRODUCT1 WHERE (PRODUCT_ID,PRODUCT_NAME) IN
(SELECT ITEM_ID,NAME FROM ITEM_LIST WHERE COST<2500)


SELECT * FROM HR.DEPARTMENTS D WHERE 3<=
(SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID)

SELECT * FROM HR.DEPARTMENTS D WHERE 
EXISTS (SELECT E.EMPLOYEE_ID FROM HR.EMPLOYEES E WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID)

SELECT * FROM HR.DEPARTMENTS D WHERE 
NOT EXISTS (SELECT E.EMPLOYEE_ID FROM HR.EMPLOYEES E WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID)

SELECT * FROM HR.JOBS J WHERE 2<
(SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.JOB_ID=J.JOB_ID)

SELECT * FROM HR.JOBS J WHERE 5=
(SELECT COUNT(*) FROM HR.EMPLOYEES E WHERE E.JOB_ID=J.JOB_ID)


SELECT T.DEPARTMENT_ID,T.EMP_COUNT,T.TOT_SALARY FROM
(SELECT E.DEPARTMENT_ID,COUNT(*) EMP_COUNT,SUM(SALARY) TOT_SALARY FROM HR.EMPLOYEES E
        GROUP BY E.DEPARTMENT_ID) T

WHERE T.EMP_COUNT>2 AND T.TOT_SALARY>10000

WITH T AS
(
    SELECT E.DEPARTMENT_ID,
    COUNT(*) EMP_COUNT,SUM(SALARY) TOL_SALARY
    FROM HR.EMPLOYEES E
    GROUP BY E.DEPARTMENT_ID
)
SELECT T.DEPARTMENT_ID,T.EMP_COUNT,T.TOL_SALARY FROM T
WHERE T.EMP_COUNT>2 AND T.TOL_SALARY>10000
SELECT * FROM  STUDENT_COURSE;
DROP TABLE STUDENT_COURSE;

////////////////////////////////***********PL/SQL**********///////////////////////////////////////////////////
BEGIN
   DBMS_OUTPUT.PUT_LINE('NAVEEN KUMAR');
   DBMS_OUTPUT.PUT_LINE('GOKUL');
END;

DECLARE
 A NUMBER:=10;
 B NUMBER:=20;
 C NUMBER;
BEGIN
C:=A+B;
DBMS_OUTPUT.PUT_LINE('GIVE VALUE FOR FIRST ONE IS '|| A);
DBMS_OUTPUT.PUT_LINE('GIVE VALUE FOR SECOND ONE IS '|| B);
DBMS_OUTPUT.PUT_LINE('GIVE VALUE FOR FINAL ONE IS '|| C);
END;

DECLARE
A NUMBER:=1005;
B NUMBER:=1001;
BEGIN
IF A>B THEN
DBMS_OUTPUT.PUT_LINE('A IS GREATER '|| A);
ELSE
DBMS_OUTPUT.PUT_LINE('B IS GREATER '|| B);
END IF;
END;

DECLARE
A NUMBER:=450;
B NUMBER:=205;
C NUMBER;
BEGIN
C:=A*B;
DBMS_OUTPUT.PUT_LINE('THE MULTIPLE VALUE IS '|| C);
END;

DECLARE
V1 NUMBER:=150;
V2 NUMBER:=170;
V3 NUMBER:=120;
BEGIN
IF V1>V2 AND V1>V3 THEN
DBMS_OUTPUT.PUT_LINE('V1 GREATER');
ELSIF V2>V3 THEN
DBMS_OUTPUT.PUT_LINE('V2 GREATER');
ELSE
DBMS_OUTPUT.PUT_LINE('V3 GREATER');
END IF;
END;

DECLARE
V1 NUMBER:=100;
V2 NUMBER:=110;
V3 NUMBER:=120;
V4 NUMBER:=130;
BEGIN
IF V1>V2 AND V1>V3 AND V1>V4 THEN
DBMS_OUTPUT.PUT_LINE(V1 || ' IS GREATER');
ELSIF V2>V1 AND V2>V3 AND V2>V4 THEN
DBMS_OUTPUT.PUT_LINE(V2 || ' IS GREATER');
ELSIF V3>V4 THEN
DBMS_OUTPUT.PUT_LINE(V3 || ' IS GREATER');
ELSE
DBMS_OUTPUT.PUT_LINE(V4 || ' IS GREATER');
END IF;
END;

DECLARE
FIRST_NAME VARCHAR2(30):='NAVEEN';
SECOND_NAME VARCHAR2(30):='KUMAR';
SALARY NUMBER:=500;
BEGIN
DBMS_OUTPUT.PUT_LINE(FIRST_NAME ||' '|| SECOND_NAME || ' IS GETTING SALARY RS. '|| SALARY);
END;
DECLARE
N1 NUMBER:=10;
N2 NUMBER:=20;
A NUMBER;
S NUMBER;
M NUMBER;
D NUMBER;
BEGIN
A:=N1+N2;
S:=N1-N2;
M:=N1*N2;
D:=N1/N2;
DBMS_OUTPUT.PUT_LINE(' ADD= '|| A);
DBMS_OUTPUT.PUT_LINE(' SUB= '|| S);
DBMS_OUTPUT.PUT_LINE(' MUL= '|| M);
DBMS_OUTPUT.PUT_LINE(' DIV= '|| D);
END;

DECLARE
N1 NUMBER:=10;
N2 NUMBER:=40;
N3 NUMBER:=30;
T NUMBER;
BEGIN
IF N1>N2 THEN
T:=N1;
N1:=N2;
N2:=T;
END IF;
IF N2>N3 THEN
T:=N2;
N2:=N3;
N3:=T;
END IF;

IF N3<N1 THEN
T:=N3;
N3:=N1;
N1:=T;
END IF;
DBMS_OUTPUT.PUT_LINE(N1|| ' '|| N2||' '|| N3);
END;

